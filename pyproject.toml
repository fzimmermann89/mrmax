[build-system]
requires = ["setuptools>=42", "wheel", "setuptools-git-versioning>=2.0,<3"]
build-backend = "setuptools.build_meta:__legacy__"

[tool.setuptools-git-versioning]
count_commits_from_version_file = true
enabled = true
version_file = "src/mrmax/VERSION"
template = "{tag}{env:mrmaxVERSIONSUFFIX:''}"
dev_template = "{tag}{env:mrmaxVERSIONSUFFIX:''}"
dirty_template = "{tag}+dirty{sha}"

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"mrmax" = ["VERSION"]

[project]
name = "mrmax"
description = "MR image reconstruction and processing package specifically developed for JAX."
readme = "README.md"
requires-python = ">=3.10,<3.14"
dynamic = ["version"]
keywords = [
    "MRI",
    "qMRI",
    "medical imaging",
    "physics-informed learning",
    "model-based reconstruction",
    "quantitative",
    "signal models",
    "machine learning",
    "deep learning",
    "reconstruction",
    "processing",
    "Pulseq",
    "JAX",
]
authors = [
    { name = "Cursor", email = "mini@cursor.ai" },
    { name = "Chad GPT", email = "chad@openai.com" },
    { name = "Claude", email = "claude@anthropic.com" },
    { name = "Je Mini", email = "jemini@google.com" },
]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "numpy>=1.23, <3.0",
    "jax>=0.4.28",
    "jaxlib>=0.4.28",
    "jaxtyping>=0.2.28",
    "equinox>=0.11.2",
    "diffrax>=0.4.0",
    "lineax>=0.1.0",
    "optax>=0.1.7",
    "pydantic>=2.0.0",
    "ismrmrd>=1.13.0",
    "einops>=0.7.0",
    "pydicom>=3.0.1",
    "pypulseq>=1.4.2",
    "finufft>=2.3.1",
    "scipy>=1.12",
    "jaxwt>=0.1.0",
    "tqdm>=4.60.0",
    "typing-extensions>=4.12",
]

[project.optional-dependencies]
tests = [
    "coverage",
    "codecov",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
docs = [
    "mrmax[notebooks]",
    "sphinx>=8.1, <8.2",
    "sphinx_rtd_theme>=3.0, <3.1",
    "sphinx-pyproject>=0.3, <0.4",
    "myst-nb>=1.2, <1.3",
    "sphinx-mathjax-offline<0.1",
    "sphinx_github_style>=1.2, <1.3",
    "sphinx-autodoc-typehints>=3, <3.1",
    "sphinx-copybutton>=0.5, <0.6",
    "sphinx-last-updated-by-git>=0.3, <0.4",
]
notebooks = [
    "zenodo_get",
    "ipykernel",
    "ipywidgets",
    "jupytext",
    "matplotlib",
]
dev = [
    "mrmax[tests, docs]"
]

[project.urls]
"Documentation" = "https://fzimmermann89.github.io/mrmax/"

# PyTest section
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore:'write_like_original':DeprecationWarning:pydicom:",

]
addopts = "-n auto --dist loadfile --maxprocesses=8"
markers = ["cuda : Tests only to be run when cuda device is available"]

# MyPy section
[tool.mypy]
warn_return_any = false
check_untyped_defs = true
warn_no_return = true
warn_unreachable = true
exclude = ["docs"]
enable_error_code = ["ignore-without-code"]
warn_unused_ignores = true


[[tool.mypy.overrides]]
module = [
    "ismrmrd.*",
    "h5py",
    "scipy.*",
    "pypulseq",
    "zenodo_get",
    "ptwt.*",
    "pywt.*",
    "platformdirs",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
extend-exclude = ["__init__.py"]
exclude = ["docs/**"]

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "FA",  # flake8-future-annotations
    "I",   # isort
    "N",   # pep8-naming
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "PIE", # flake8-pie
    # "PL",  # PyLint
    "PTH", # flake8-use-pathlib
    "T20", # flake8-print
    "Q",   # flake8-quotes
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
    "ERA", # flake8-eradicate
]
extend-select = [
    "ANN001", #  type annotation for function argument
    "ANN201", #  return type annonation public function
    "ANN205", #  return type annonation static method
    "ANN401", #  any type annotation
    "BLE001", #  blind exception
    "D107",   #  missing docstring in __init__
    "D417",   #  undocumented-parameter
]
ignore = [
    "N999",   #  invalid module name
    "COM812", #  missing-trailing-comma (conflict with formatter)
    "SIM108", #  if-else-block-instead-of-if-exp
    "A005",   #  stdlib-module-shadowing
]

[tool.ruff.lint.isort]
force-single-line = false
split-on-trailing-comma = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false

[tool.typos.default]
locale = "en-us"
check-filename = false
extend-ignore-re = [
    "(?Rm)^.*(#|//)\\s*noqa:\\s*typos", # "# noqa: typos" to ignore typos
]

[tool.typos.default.extend-words]
Reson = "Reson"   # required for Proc. Intl. Soc. Mag. Reson. Med.
iy = "iy"
Ba = "Ba"
wht = "wht"       # Brainweb tissue class

[tool.typos.files]
extend-exclude = [
    "examples/*.ipynb",
] # don't check notebooks because py files have already been checked

[tool.coverage.paths]
source = ["src", "*/site-packages"]
